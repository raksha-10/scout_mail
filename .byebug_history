c
user_organisations.exists?(organisation: organisation, role: Role.find_by(name: role_name))
c
user = User.invite!(email: params[:email],name: params[:name],password: params[:password])
c
@resource.name
@resource
@resource.email
c
n
params[:name]
c
user_organisations.exists?(organisation: organisation, role: Role.find_by(name: role_name))
c
user_organisations.exists?(organisation: organisation, role: Role.find_by(name: role_name))
role_name
organisation
c
user_organisations.exists?(organisation: organisation, role: Role.find_by(name: role_name))
Role.find_by(name: role_name)
role_name
c
organisation
organisation,
Role.find_by(name: role_name)
role_name
user_organisations.exists?(organisation: organisation, role: Role.find_by(name: role_name))
c
organisation
organisation.user_organisations
role.name == "Owner"
role.name == "Owner
c
organisation.user_organisations.exists?(role: role)
organisation.user_organisations
role
c
 user_organisations.create!(role: Role.find_or_create_by(name: "Owner"), user_id: self.id)
 user_organisations.create(role: Role.find_or_create_by(name: "Owner"), user_id: self.id)
self.id
c
 token = request.headers['Authorization']&.split(' ')&.last
c
organisation_params
c
FakeRackSession.new
request.env['rack.session']
c
self.resource = User.find_by(email: params[:user][:email])
c
self.resource = User.find_by(email: params[:user][:email])
c
self.resource = warden.authenticate!(auth_options)
auth_options
c
current_user
c
